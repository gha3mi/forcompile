var tipuesearch = {"pages":[{"title":" ForCompile ","text":"ForCompile ForCompile : A Fortran library to access the Compiler Explorer API. How to use Prerequisites: On Ubuntu, you need to install the curl development headers. Use the following command: sudo apt install -y libcurl4-openssl-dev Clone the repository: You can clone the ForCompile repository from GitHub using the following command: git clone https://github.com/gha3mi/forcompile.git cd forcompile list of languages program test_1 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers () end program test_1 list of compilers program test_2 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_languages () end program test_2 list of compilers with matching language program test_3 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers ( language_id = 'fortran' ) end program test_3 list of libraries program test_4 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries () end program test_4 list of libraries with matching language program test_5 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries ( language_id = 'fortran' ) end program test_5 list of code formatters program test_6 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_formatters () end program test_6 perform a compilation program test_7 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % set_source ( \"& program hello;& write(*,*) 'Hello World';& end program hello& \" ) call ce % set_compiler_id ( 'gfortran132' ) call ce % options % set_userArguments ( '-O3' ) call ce % options % set_compilerOptions ( skipAsm = . false ., executorRequest = . false .) call ce % options % set_filters (& binary = . false .,& binaryObject = . false .,& commentOnly = . true .,& demangle = . true .,& directives = . true .,& execute = . true .,& intel = . true .,& labels = . true .,& libraryCode = . false .,& trim = . false .,& debugCalls = . false .) call ce % set_lang ( 'fortran' ) call ce % set_allowStoreCodeDebug (. true .) call ce % compile () call ce % finalize () end program test_7 fpm dependency If you want to use ForCompile as a dependency in your own fpm project,\nyou can easily include it by adding the following line to your fpm.toml file: [dependencies] forcompile = { git = \"https://github.com/gha3mi/forcompile.git\" } API documentation The most up-to-date API documentation for the master branch is available here .\nTo generate the API documentation for ForCompile using ford run the following\ncommand: ford ford.yml Contributing Contributions to ForCompile are welcome!\nIf you find any issues or would like to suggest improvements, please open an issue. Developer Info Seyed Ali Ghasemi","tags":"home","loc":"index.html"},{"title":"compilerOptions – ForCompile ","text":"type, private :: compilerOptions Inherited by type~~compileroptions~~InheritedByGraph type~compileroptions compilerOptions type~options options type~options->type~compileroptions compilerOptions type~compiler_explorer compiler_explorer type~compiler_explorer->type~options options Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables skipAsm executorRequest Type-Bound Procedures set_skipAsm set_executorRequest Source Code compilerOptions Components Type Visibility Attributes Name Initial logical, public :: skipAsm = .false. logical, public :: executorRequest = .false. Type-Bound Procedures procedure, public,  :: set_skipAsm private pure elemental subroutine set_skipAsm (this, skipAsm) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compilerOptions ), intent(inout) :: this logical, intent(in) :: skipAsm procedure, public,  :: set_executorRequest private pure elemental subroutine set_executorRequest (this, executorRequest) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compilerOptions ), intent(inout) :: this logical, intent(in) :: executorRequest Source Code type compilerOptions logical :: skipAsm = . false . logical :: executorRequest = . false . contains procedure :: set_skipAsm procedure :: set_executorRequest end type compilerOptions","tags":"","loc":"type/compileroptions.html"},{"title":"filters – ForCompile ","text":"type, private :: filters Inherited by type~~filters~~InheritedByGraph type~filters filters type~options options type~options->type~filters filters type~compiler_explorer compiler_explorer type~compiler_explorer->type~options options Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables binary binaryObject commentOnly demangle directives execute intel labels libraryCode trim debugCalls Type-Bound Procedures set_binary set_binaryObject set_commentOnly set_demangle set_directives set_execute set_intel set_labels set_libraryCode set_trim set_debugCalls Source Code filters Components Type Visibility Attributes Name Initial logical, public :: binary = .false. logical, public :: binaryObject = .false. logical, public :: commentOnly = .false. logical, public :: demangle = .false. logical, public :: directives = .false. logical, public :: execute = .false. logical, public :: intel = .false. logical, public :: labels = .false. logical, public :: libraryCode = .false. logical, public :: trim = .false. logical, public :: debugCalls = .false. Type-Bound Procedures procedure, public,  :: set_binary private pure elemental subroutine set_binary (this, binary) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: binary procedure, public,  :: set_binaryObject private pure elemental subroutine set_binaryObject (this, binaryObject) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: binaryObject procedure, public,  :: set_commentOnly private pure elemental subroutine set_commentOnly (this, commentOnly) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: commentOnly procedure, public,  :: set_demangle private pure elemental subroutine set_demangle (this, demangle) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: demangle procedure, public,  :: set_directives private pure elemental subroutine set_directives (this, directives) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: directives procedure, public,  :: set_execute private pure elemental subroutine set_execute (this, execute) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: execute procedure, public,  :: set_intel private pure elemental subroutine set_intel (this, intel) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: intel procedure, public,  :: set_labels private pure elemental subroutine set_labels (this, labels) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: labels procedure, public,  :: set_libraryCode private pure elemental subroutine set_libraryCode (this, libraryCode) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: libraryCode procedure, public,  :: set_trim private pure elemental subroutine set_trim (this, trim) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: trim procedure, public,  :: set_debugCalls private pure elemental subroutine set_debugCalls (this, debugCalls) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: debugCalls Source Code type filters logical :: binary = . false . logical :: binaryObject = . false . logical :: commentOnly = . false . logical :: demangle = . false . logical :: directives = . false . logical :: execute = . false . logical :: intel = . false . logical :: labels = . false . logical :: libraryCode = . false . logical :: trim = . false . logical :: debugCalls = . false . contains procedure :: set_binary procedure :: set_binaryObject procedure :: set_commentOnly procedure :: set_demangle procedure :: set_directives procedure :: set_execute procedure :: set_intel procedure :: set_labels procedure :: set_libraryCode procedure :: set_trim procedure :: set_debugCalls end type filters","tags":"","loc":"type/filters.html"},{"title":"tools – ForCompile ","text":"type, private :: tools Inherited by type~~tools~~InheritedByGraph type~tools tools type~options options type~options->type~tools tools type~compiler_explorer compiler_explorer type~compiler_explorer->type~options options Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables id_args Source Code tools Components Type Visibility Attributes Name Initial character(len=1024), public :: id_args (2) Source Code type tools character ( len = 1024 ) :: id_args ( 2 ) end type tools","tags":"","loc":"type/tools.html"},{"title":"libraries – ForCompile ","text":"type, private :: libraries Inherited by type~~libraries~~InheritedByGraph type~libraries libraries type~options options type~options->type~libraries libraries type~compiler_explorer compiler_explorer type~compiler_explorer->type~options options Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables id_version Source Code libraries Components Type Visibility Attributes Name Initial character(len=1024), public :: id_version (2) Source Code type libraries character ( len = 1024 ) :: id_version ( 2 ) end type libraries","tags":"","loc":"type/libraries.html"},{"title":"options – ForCompile ","text":"type, private :: options Inherits type~~options~~InheritsGraph type~options options type~compileroptions compilerOptions type~options->type~compileroptions compilerOptions type~filters filters type~options->type~filters filters type~libraries libraries type~options->type~libraries libraries type~tools tools type~options->type~tools tools Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Inherited by type~~options~~InheritedByGraph type~options options type~compiler_explorer compiler_explorer type~compiler_explorer->type~options options Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables userArguments compilerOptions filters tools libraries Type-Bound Procedures set_userArguments set_compilerOptions set_filters set_tools set_libraries deallocate_userArguments deallocate_tools deallocate_libraries finalize Source Code options Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: userArguments type( compilerOptions ), public :: compilerOptions type( filters ), public :: filters type( tools ), public, allocatable :: tools (:) type( libraries ), public, allocatable :: libraries (:) Type-Bound Procedures procedure, public,  :: set_userArguments private pure elemental subroutine set_userArguments (this, userArguments) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this character(len=*), intent(in) :: userArguments procedure, public,  :: set_compilerOptions private pure elemental subroutine set_compilerOptions (this, skipAsm, executorRequest) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this logical, intent(in), optional :: skipAsm logical, intent(in), optional :: executorRequest procedure, public,  :: set_filters private pure elemental subroutine set_filters (this, binary, binaryObject, commentOnly, demangle, directives, execute, intel, labels, libraryCode, trim, debugCalls) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this logical, intent(in), optional :: binary logical, intent(in), optional :: binaryObject logical, intent(in), optional :: commentOnly logical, intent(in), optional :: demangle logical, intent(in), optional :: directives logical, intent(in), optional :: execute logical, intent(in), optional :: intel logical, intent(in), optional :: labels logical, intent(in), optional :: libraryCode logical, intent(in), optional :: trim logical, intent(in), optional :: debugCalls procedure, public,  :: set_tools private pure elemental subroutine set_tools (this, id, args) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this character(len=*), intent(in) :: id character(len=*), intent(in) :: args procedure, public,  :: set_libraries private pure elemental subroutine set_libraries (this, id, version) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this character(len=*), intent(in) :: id character(len=*), intent(in) :: version procedure, private :: deallocate_userArguments private pure elemental subroutine deallocate_userArguments (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this procedure, private :: deallocate_tools private pure elemental subroutine deallocate_tools (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this procedure, private :: deallocate_libraries private pure elemental subroutine deallocate_libraries (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this procedure, public,  :: finalize => deallocate_options private pure elemental subroutine deallocate_options (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this Source Code type options character ( len = :), allocatable :: userArguments type ( compilerOptions ) :: compilerOptions type ( filters ) :: filters type ( tools ), allocatable :: tools (:) type ( libraries ), allocatable :: libraries (:) contains procedure :: set_userArguments procedure :: set_compilerOptions procedure :: set_filters procedure :: set_tools procedure :: set_libraries procedure , private :: deallocate_userArguments procedure , private :: deallocate_tools procedure , private :: deallocate_libraries procedure :: finalize => deallocate_options end type options","tags":"","loc":"type/options.html"},{"title":"compiler_explorer – ForCompile ","text":"type, public :: compiler_explorer Inherits type~~compiler_explorer~~InheritsGraph type~compiler_explorer compiler_explorer type~options options type~compiler_explorer->type~options options type~compileroptions compilerOptions type~options->type~compileroptions compilerOptions type~filters filters type~options->type~filters filters type~libraries libraries type~options->type~libraries libraries type~tools tools type~options->type~tools tools Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables api_url compiler_id source lang allowStoreCodeDebug options Type-Bound Procedures list_languages list_compilers list_libraries list_formatters set_compiler_id set_source set_lang set_allowStoreCodeDebug compile deallocate_compiler_id deallocate_source deallocate_lang finalize Source Code compiler_explorer Components Type Visibility Attributes Name Initial character(len=19), public :: api_url = \"https://godbolt.org\" character(len=:), public, allocatable :: compiler_id character(len=:), public, allocatable :: source character(len=:), public, allocatable :: lang logical, public :: allowStoreCodeDebug type( options ), public :: options Type-Bound Procedures procedure, public,  :: list_languages private  subroutine list_languages (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this procedure, public,  :: list_compilers private  subroutine list_compilers (this, language_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id procedure, public,  :: list_libraries private  subroutine list_libraries (this, language_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id procedure, public,  :: list_formatters private  subroutine list_formatters (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this procedure, public,  :: set_compiler_id private pure elemental subroutine set_compiler_id (this, compiler_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in) :: compiler_id procedure, public,  :: set_source private pure elemental subroutine set_source (this, source) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in) :: source procedure, public,  :: set_lang private pure elemental subroutine set_lang (this, lang) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in) :: lang procedure, public,  :: set_allowStoreCodeDebug private pure elemental subroutine set_allowStoreCodeDebug (this, allowStoreCodeDebug) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this logical, intent(in) :: allowStoreCodeDebug procedure, public,  :: compile private impure elemental subroutine compile (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this procedure, private :: deallocate_compiler_id private pure elemental subroutine deallocate_compiler_id (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this procedure, private :: deallocate_source private pure elemental subroutine deallocate_source (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this procedure, private :: deallocate_lang private pure elemental subroutine deallocate_lang (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this procedure, public,  :: finalize => deallocate_comnpiler_explorer private pure elemental subroutine deallocate_comnpiler_explorer (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Source Code type compiler_explorer character ( len = 19 ) :: api_url = \"https://godbolt.org\" character ( len = :), allocatable :: compiler_id character ( len = :), allocatable :: source character ( len = :), allocatable :: lang logical :: allowStoreCodeDebug type ( options ) :: options contains procedure :: list_languages procedure :: list_compilers procedure :: list_libraries procedure :: list_formatters procedure :: set_compiler_id procedure :: set_source procedure :: set_lang procedure :: set_allowStoreCodeDebug procedure :: compile procedure , private :: deallocate_compiler_id procedure , private :: deallocate_source procedure , private :: deallocate_lang procedure :: finalize => deallocate_comnpiler_explorer end type compiler_explorer","tags":"","loc":"type/compiler_explorer.html"},{"title":"set_filters – ForCompile","text":"private pure elemental subroutine set_filters(this, binary, binaryObject, commentOnly, demangle, directives, execute, intel, labels, libraryCode, trim, debugCalls) Type Bound options Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this logical, intent(in), optional :: binary logical, intent(in), optional :: binaryObject logical, intent(in), optional :: commentOnly logical, intent(in), optional :: demangle logical, intent(in), optional :: directives logical, intent(in), optional :: execute logical, intent(in), optional :: intel logical, intent(in), optional :: labels logical, intent(in), optional :: libraryCode logical, intent(in), optional :: trim logical, intent(in), optional :: debugCalls Contents Source Code set_filters Source Code elemental pure subroutine set_filters ( this ,& binary , binaryObject , commentOnly , demangle , directives , execute , intel ,& labels , libraryCode , trim , debugCalls ) class ( options ), intent ( inout ) :: this logical , intent ( in ), optional :: binary logical , intent ( in ), optional :: binaryObject logical , intent ( in ), optional :: commentOnly logical , intent ( in ), optional :: demangle logical , intent ( in ), optional :: directives logical , intent ( in ), optional :: execute logical , intent ( in ), optional :: intel logical , intent ( in ), optional :: labels logical , intent ( in ), optional :: libraryCode logical , intent ( in ), optional :: trim logical , intent ( in ), optional :: debugCalls if ( present ( binary )) call this % filters % set_binary ( binary ) if ( present ( binaryObject )) call this % filters % set_binaryObject ( binaryObject ) if ( present ( commentOnly )) call this % filters % set_commentOnly ( commentOnly ) if ( present ( demangle )) call this % filters % set_demangle ( demangle ) if ( present ( directives )) call this % filters % set_directives ( directives ) if ( present ( execute )) call this % filters % set_execute ( execute ) if ( present ( intel )) call this % filters % set_intel ( intel ) if ( present ( labels )) call this % filters % set_labels ( labels ) if ( present ( libraryCode )) call this % filters % set_libraryCode ( libraryCode ) if ( present ( trim )) call this % filters % set_trim ( trim ) if ( present ( debugCalls )) call this % filters % set_debugCalls ( debugCalls ) end subroutine set_filters","tags":"","loc":"proc/set_filters.html"},{"title":"set_compilerOptions – ForCompile","text":"private pure elemental subroutine set_compilerOptions(this, skipAsm, executorRequest) Type Bound options Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this logical, intent(in), optional :: skipAsm logical, intent(in), optional :: executorRequest Contents Source Code set_compilerOptions Source Code elemental pure subroutine set_compilerOptions ( this , skipAsm , executorRequest ) class ( options ), intent ( inout ) :: this logical , intent ( in ), optional :: skipAsm logical , intent ( in ), optional :: executorRequest if ( present ( skipAsm )) this % compilerOptions % skipAsm = skipAsm if ( present ( executorRequest )) this % compilerOptions % executorRequest = executorRequest end subroutine set_compilerOptions","tags":"","loc":"proc/set_compileroptions.html"},{"title":"deallocate_options – ForCompile","text":"private pure elemental subroutine deallocate_options(this) Type Bound options Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this Calls proc~~deallocate_options~~CallsGraph proc~deallocate_options forcompile::options%deallocate_options proc~deallocate_libraries forcompile::options%deallocate_libraries proc~deallocate_options->proc~deallocate_libraries proc~deallocate_tools forcompile::options%deallocate_tools proc~deallocate_options->proc~deallocate_tools proc~deallocate_userarguments forcompile::options%deallocate_userArguments proc~deallocate_options->proc~deallocate_userarguments Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code deallocate_options Source Code elemental pure subroutine deallocate_options ( this ) class ( options ), intent ( inout ) :: this call this % deallocate_userArguments () call this % deallocate_tools () call this % deallocate_libraries () end subroutine deallocate_options","tags":"","loc":"proc/deallocate_options.html"},{"title":"deallocate_comnpiler_explorer – ForCompile","text":"private pure elemental subroutine deallocate_comnpiler_explorer(this) Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Calls proc~~deallocate_comnpiler_explorer~~CallsGraph proc~deallocate_comnpiler_explorer forcompile::compiler_explorer%deallocate_comnpiler_explorer proc~deallocate_compiler_id forcompile::compiler_explorer%deallocate_compiler_id proc~deallocate_comnpiler_explorer->proc~deallocate_compiler_id proc~deallocate_lang forcompile::compiler_explorer%deallocate_lang proc~deallocate_comnpiler_explorer->proc~deallocate_lang proc~deallocate_source forcompile::compiler_explorer%deallocate_source proc~deallocate_comnpiler_explorer->proc~deallocate_source Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code deallocate_comnpiler_explorer Source Code elemental pure subroutine deallocate_comnpiler_explorer ( this ) class ( compiler_explorer ), intent ( inout ) :: this call this % deallocate_compiler_id () call this % deallocate_source () call this % deallocate_lang () call this % options % finalize () end subroutine deallocate_comnpiler_explorer","tags":"","loc":"proc/deallocate_comnpiler_explorer.html"},{"title":"deallocate_userArguments – ForCompile","text":"private pure elemental subroutine deallocate_userArguments(this) Type Bound options Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this Called by proc~~deallocate_userarguments~~CalledByGraph proc~deallocate_userarguments forcompile::options%deallocate_userArguments proc~deallocate_options forcompile::options%deallocate_options proc~deallocate_options->proc~deallocate_userarguments Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code deallocate_userArguments Source Code elemental pure subroutine deallocate_userArguments ( this ) class ( options ), intent ( inout ) :: this if ( allocated ( this % userArguments )) deallocate ( this % userArguments ) end subroutine deallocate_userArguments","tags":"","loc":"proc/deallocate_userarguments.html"},{"title":"deallocate_tools – ForCompile","text":"private pure elemental subroutine deallocate_tools(this) Type Bound options Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this Called by proc~~deallocate_tools~~CalledByGraph proc~deallocate_tools forcompile::options%deallocate_tools proc~deallocate_options forcompile::options%deallocate_options proc~deallocate_options->proc~deallocate_tools Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code deallocate_tools Source Code elemental pure subroutine deallocate_tools ( this ) class ( options ), intent ( inout ) :: this if ( allocated ( this % tools )) deallocate ( this % tools ) end subroutine deallocate_tools","tags":"","loc":"proc/deallocate_tools.html"},{"title":"deallocate_libraries – ForCompile","text":"private pure elemental subroutine deallocate_libraries(this) Type Bound options Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this Called by proc~~deallocate_libraries~~CalledByGraph proc~deallocate_libraries forcompile::options%deallocate_libraries proc~deallocate_options forcompile::options%deallocate_options proc~deallocate_options->proc~deallocate_libraries Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code deallocate_libraries Source Code elemental pure subroutine deallocate_libraries ( this ) class ( options ), intent ( inout ) :: this if ( allocated ( this % libraries )) deallocate ( this % libraries ) end subroutine deallocate_libraries","tags":"","loc":"proc/deallocate_libraries.html"},{"title":"deallocate_compiler_id – ForCompile","text":"private pure elemental subroutine deallocate_compiler_id(this) Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Called by proc~~deallocate_compiler_id~~CalledByGraph proc~deallocate_compiler_id forcompile::compiler_explorer%deallocate_compiler_id proc~deallocate_comnpiler_explorer forcompile::compiler_explorer%deallocate_comnpiler_explorer proc~deallocate_comnpiler_explorer->proc~deallocate_compiler_id Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code deallocate_compiler_id Source Code elemental pure subroutine deallocate_compiler_id ( this ) class ( compiler_explorer ), intent ( inout ) :: this if ( allocated ( this % compiler_id )) deallocate ( this % compiler_id ) end subroutine deallocate_compiler_id","tags":"","loc":"proc/deallocate_compiler_id.html"},{"title":"deallocate_source – ForCompile","text":"private pure elemental subroutine deallocate_source(this) Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Called by proc~~deallocate_source~~CalledByGraph proc~deallocate_source forcompile::compiler_explorer%deallocate_source proc~deallocate_comnpiler_explorer forcompile::compiler_explorer%deallocate_comnpiler_explorer proc~deallocate_comnpiler_explorer->proc~deallocate_source Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code deallocate_source Source Code elemental pure subroutine deallocate_source ( this ) class ( compiler_explorer ), intent ( inout ) :: this if ( allocated ( this % source )) deallocate ( this % source ) end subroutine deallocate_source","tags":"","loc":"proc/deallocate_source.html"},{"title":"deallocate_lang – ForCompile","text":"private pure elemental subroutine deallocate_lang(this) Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Called by proc~~deallocate_lang~~CalledByGraph proc~deallocate_lang forcompile::compiler_explorer%deallocate_lang proc~deallocate_comnpiler_explorer forcompile::compiler_explorer%deallocate_comnpiler_explorer proc~deallocate_comnpiler_explorer->proc~deallocate_lang Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code deallocate_lang Source Code elemental pure subroutine deallocate_lang ( this ) class ( compiler_explorer ), intent ( inout ) :: this if ( allocated ( this % lang )) deallocate ( this % lang ) end subroutine deallocate_lang","tags":"","loc":"proc/deallocate_lang.html"},{"title":"set_source – ForCompile","text":"private pure elemental subroutine set_source(this, source) Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in) :: source Contents Source Code set_source Source Code elemental pure subroutine set_source ( this , source ) class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: source this % source = trim ( source ) end subroutine set_source","tags":"","loc":"proc/set_source.html"},{"title":"set_tools – ForCompile","text":"private pure elemental subroutine set_tools(this, id, args) Type Bound options Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this character(len=*), intent(in) :: id character(len=*), intent(in) :: args Contents Source Code set_tools Source Code elemental pure subroutine set_tools ( this , id , args ) class ( options ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: id character ( len =* ), intent ( in ) :: args type ( tools ), allocatable :: tmp (:) if (. not . allocated ( this % tools )) then allocate ( this % tools ( 1 )) this % tools ( 1 )% id_args ( 1 ) = trim ( id ) this % tools ( 1 )% id_args ( 2 ) = trim ( args ) else call move_alloc ( this % tools , tmp ) allocate ( this % tools ( size ( tmp ) + 1 )) this % tools ( 1 : size ( tmp )) = tmp this % tools ( size ( tmp ) + 1 )% id_args ( 1 ) = trim ( id ) this % tools ( size ( tmp ) + 1 )% id_args ( 2 ) = trim ( args ) end if end subroutine set_tools","tags":"","loc":"proc/set_tools.html"},{"title":"set_libraries – ForCompile","text":"private pure elemental subroutine set_libraries(this, id, version) Type Bound options Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this character(len=*), intent(in) :: id character(len=*), intent(in) :: version Contents Source Code set_libraries Source Code elemental pure subroutine set_libraries ( this , id , version ) class ( options ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: id character ( len =* ), intent ( in ) :: version type ( libraries ), allocatable :: tmp (:) if (. not . allocated ( this % libraries )) then allocate ( this % libraries ( 1 )) this % libraries ( 1 )% id_version ( 1 ) = trim ( id ) this % libraries ( 1 )% id_version ( 2 ) = trim ( version ) else call move_alloc ( this % libraries , tmp ) allocate ( this % libraries ( size ( tmp ) + 1 )) this % libraries ( 1 : size ( tmp )) = tmp this % libraries ( size ( tmp ) + 1 )% id_version ( 1 ) = trim ( id ) this % libraries ( size ( tmp ) + 1 )% id_version ( 2 ) = trim ( version ) end if end subroutine set_libraries","tags":"","loc":"proc/set_libraries.html"},{"title":"set_binary – ForCompile","text":"private pure elemental subroutine set_binary(this, binary) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: binary Contents Source Code set_binary Source Code elemental pure subroutine set_binary ( this , binary ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: binary this % binary = binary end subroutine set_binary","tags":"","loc":"proc/set_binary.html"},{"title":"set_binaryObject – ForCompile","text":"private pure elemental subroutine set_binaryObject(this, binaryObject) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: binaryObject Contents Source Code set_binaryObject Source Code elemental pure subroutine set_binaryObject ( this , binaryObject ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: binaryObject this % binaryObject = binaryObject end subroutine set_binaryObject","tags":"","loc":"proc/set_binaryobject.html"},{"title":"set_commentOnly – ForCompile","text":"private pure elemental subroutine set_commentOnly(this, commentOnly) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: commentOnly Contents Source Code set_commentOnly Source Code elemental pure subroutine set_commentOnly ( this , commentOnly ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: commentOnly this % commentOnly = commentOnly end subroutine set_commentOnly","tags":"","loc":"proc/set_commentonly.html"},{"title":"set_demangle – ForCompile","text":"private pure elemental subroutine set_demangle(this, demangle) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: demangle Contents Source Code set_demangle Source Code elemental pure subroutine set_demangle ( this , demangle ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: demangle this % demangle = demangle end subroutine set_demangle","tags":"","loc":"proc/set_demangle.html"},{"title":"set_directives – ForCompile","text":"private pure elemental subroutine set_directives(this, directives) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: directives Contents Source Code set_directives Source Code elemental pure subroutine set_directives ( this , directives ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: directives this % directives = directives end subroutine set_directives","tags":"","loc":"proc/set_directives.html"},{"title":"set_execute – ForCompile","text":"private pure elemental subroutine set_execute(this, execute) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: execute Contents Source Code set_execute Source Code elemental pure subroutine set_execute ( this , execute ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: execute this % execute = execute end subroutine set_execute","tags":"","loc":"proc/set_execute.html"},{"title":"set_intel – ForCompile","text":"private pure elemental subroutine set_intel(this, intel) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: intel Contents Source Code set_intel Source Code elemental pure subroutine set_intel ( this , intel ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: intel this % intel = intel end subroutine set_intel","tags":"","loc":"proc/set_intel.html"},{"title":"set_labels – ForCompile","text":"private pure elemental subroutine set_labels(this, labels) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: labels Contents Source Code set_labels Source Code elemental pure subroutine set_labels ( this , labels ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: labels this % labels = labels end subroutine set_labels","tags":"","loc":"proc/set_labels.html"},{"title":"set_libraryCode – ForCompile","text":"private pure elemental subroutine set_libraryCode(this, libraryCode) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: libraryCode Contents Source Code set_libraryCode Source Code elemental pure subroutine set_libraryCode ( this , libraryCode ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: libraryCode this % libraryCode = libraryCode end subroutine set_libraryCode","tags":"","loc":"proc/set_librarycode.html"},{"title":"set_trim – ForCompile","text":"private pure elemental subroutine set_trim(this, trim) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: trim Contents Source Code set_trim Source Code elemental pure subroutine set_trim ( this , trim ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: trim this % trim = trim end subroutine set_trim","tags":"","loc":"proc/set_trim.html"},{"title":"set_debugCalls – ForCompile","text":"private pure elemental subroutine set_debugCalls(this, debugCalls) Type Bound filters Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: debugCalls Contents Source Code set_debugCalls Source Code elemental pure subroutine set_debugCalls ( this , debugCalls ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: debugCalls this % debugCalls = debugCalls end subroutine set_debugCalls","tags":"","loc":"proc/set_debugcalls.html"},{"title":"set_skipAsm – ForCompile","text":"private pure elemental subroutine set_skipAsm(this, skipAsm) Type Bound compilerOptions Arguments Type Intent Optional Attributes Name class( compilerOptions ), intent(inout) :: this logical, intent(in) :: skipAsm Contents Source Code set_skipAsm Source Code elemental pure subroutine set_skipAsm ( this , skipAsm ) class ( compilerOptions ), intent ( inout ) :: this logical , intent ( in ) :: skipAsm this % skipAsm = skipAsm end subroutine set_skipAsm","tags":"","loc":"proc/set_skipasm.html"},{"title":"set_executorRequest – ForCompile","text":"private pure elemental subroutine set_executorRequest(this, executorRequest) Type Bound compilerOptions Arguments Type Intent Optional Attributes Name class( compilerOptions ), intent(inout) :: this logical, intent(in) :: executorRequest Contents Source Code set_executorRequest Source Code elemental pure subroutine set_executorRequest ( this , executorRequest ) class ( compilerOptions ), intent ( inout ) :: this logical , intent ( in ) :: executorRequest this % executorRequest = executorRequest end subroutine set_executorRequest","tags":"","loc":"proc/set_executorrequest.html"},{"title":"set_userArguments – ForCompile","text":"private pure elemental subroutine set_userArguments(this, userArguments) Type Bound options Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this character(len=*), intent(in) :: userArguments Contents Source Code set_userArguments Source Code elemental pure subroutine set_userArguments ( this , userArguments ) class ( options ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: userArguments this % userArguments = trim ( userArguments ) end subroutine set_userArguments","tags":"","loc":"proc/set_userarguments.html"},{"title":"set_lang – ForCompile","text":"private pure elemental subroutine set_lang(this, lang) Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in) :: lang Contents Source Code set_lang Source Code elemental pure subroutine set_lang ( this , lang ) class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: lang this % lang = trim ( lang ) end subroutine set_lang","tags":"","loc":"proc/set_lang.html"},{"title":"set_allowStoreCodeDebug – ForCompile","text":"private pure elemental subroutine set_allowStoreCodeDebug(this, allowStoreCodeDebug) Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this logical, intent(in) :: allowStoreCodeDebug Contents Source Code set_allowStoreCodeDebug Source Code elemental pure subroutine set_allowStoreCodeDebug ( this , allowStoreCodeDebug ) class ( compiler_explorer ), intent ( inout ) :: this logical , intent ( in ) :: allowStoreCodeDebug this % allowStoreCodeDebug = allowStoreCodeDebug end subroutine set_allowStoreCodeDebug","tags":"","loc":"proc/set_allowstorecodedebug.html"},{"title":"set_compiler_id – ForCompile","text":"private pure elemental subroutine set_compiler_id(this, compiler_id) Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in) :: compiler_id Contents Source Code set_compiler_id Source Code elemental pure subroutine set_compiler_id ( this , compiler_id ) class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: compiler_id this % compiler_id = trim ( compiler_id ) end subroutine set_compiler_id","tags":"","loc":"proc/set_compiler_id.html"},{"title":"compile – ForCompile","text":"private impure elemental subroutine compile(this) Uses json_module http proc~~compile~~UsesGraph proc~compile forcompile::compiler_explorer%compile http http proc~compile->http json_module json_module proc~compile->json_module Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Calls proc~~compile~~CallsGraph proc~compile forcompile::compiler_explorer%compile add add proc~compile->add destroy destroy proc~compile->destroy initialize initialize proc~compile->initialize pair_type pair_type proc~compile->pair_type print_to_string print_to_string proc~compile->print_to_string request request proc~compile->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code compile Source Code elemental impure subroutine compile ( this ) use http , only : response_type , request , HTTP_POST , pair_type use json_module , only : json_file class ( compiler_explorer ), intent ( inout ) :: this character ( len = :), allocatable :: jsonstr type ( pair_type ), allocatable :: req_header (:) type ( response_type ) :: response type ( json_file ) :: json integer :: i character ( len = 10 ) :: i_str req_header = [ pair_type ( 'Content-Type' , 'application/json' )] call json % initialize () call json % add ( 'source' , this % source ) call json % add ( 'options.userArguments' , this % options % userArguments ) call json % add ( 'options.compilerOptions.skipAsm' , this % options % compilerOptions % skipAsm ) call json % add ( 'options.compilerOptions.executorRequest' , this % options % compilerOptions % executorRequest ) call json % add ( 'options.filters.binary' , this % options % filters % binary ) call json % add ( 'options.filters.binaryObject' , this % options % filters % binaryObject ) call json % add ( 'options.filters.commentOnly' , this % options % filters % commentOnly ) call json % add ( 'options.filters.demangle' , this % options % filters % demangle ) call json % add ( 'options.filters.directives' , this % options % filters % directives ) call json % add ( 'options.filters.execute' , this % options % filters % execute ) call json % add ( 'options.filters.intel' , this % options % filters % intel ) call json % add ( 'options.filters.labels' , this % options % filters % labels ) call json % add ( 'options.filters.libraryCode' , this % options % filters % libraryCode ) call json % add ( 'options.filters.trim' , this % options % filters % trim ) call json % add ( 'options.filters.debugCalls' , this % options % filters % debugCalls ) if ( allocated ( this % options % tools )) then do i = 1 , size ( this % options % tools ) write ( i_str , '(I2)' ) i call json % add ( 'options.tools(' // trim ( i_str ) // ').id' , trim ( this % options % tools ( i )% id_args ( 1 ))) call json % add ( 'options.tools(' // trim ( i_str ) // ').args' , trim ( this % options % tools ( i )% id_args ( 2 ))) end do end if if ( allocated ( this % options % libraries )) then do i = 1 , size ( this % options % libraries ) write ( i_str , '(I2)' ) i call json % add ( 'options.libraries(' // trim ( i_str ) // ').id' , trim ( this % options % libraries ( i )% id_version ( 1 ))) call json % add ( 'options.libraries(' // trim ( i_str ) // ').version' , trim ( this % options % libraries ( i )% id_version ( 2 ))) end do end if call json % add ( 'lang' , this % lang ) call json % add ( 'allowStoreCodeDebug' , this % allowStoreCodeDebug ) call json % print_to_string ( jsonstr ) call json % destroy () response = request ( url = this % api_url // '/api/compiler/' // trim ( this % compiler_id ) // '/compile' ,& method = HTTP_POST , data = jsonstr , header = req_header ) if ( response % ok ) then print * , response % content else print '(A)' , 'Sorry, an error occurred while processing your request.' print '(A)' , 'Error message:' , response % err_msg end if end subroutine compile","tags":"","loc":"proc/compile.html"},{"title":"list_languages – ForCompile","text":"private  subroutine list_languages(this) Uses http proc~~list_languages~~UsesGraph proc~list_languages forcompile::compiler_explorer%list_languages http http proc~list_languages->http Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Calls proc~~list_languages~~CallsGraph proc~list_languages forcompile::compiler_explorer%list_languages request request proc~list_languages->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code list_languages Source Code subroutine list_languages ( this ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this type ( response_type ) :: response response = request ( url = this % api_url // '/api/languages' ) if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_languages","tags":"","loc":"proc/list_languages.html"},{"title":"list_compilers – ForCompile","text":"private  subroutine list_compilers(this, language_id) Uses http proc~~list_compilers~~UsesGraph proc~list_compilers forcompile::compiler_explorer%list_compilers http http proc~list_compilers->http Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id Calls proc~~list_compilers~~CallsGraph proc~list_compilers forcompile::compiler_explorer%list_compilers request request proc~list_compilers->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code list_compilers Source Code subroutine list_compilers ( this , language_id ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: language_id type ( response_type ) :: response if ( present ( language_id )) then response = request ( url = this % api_url // '/api/compilers/' // trim ( language_id )) else response = request ( url = this % api_url // '/api/compilers' ) end if if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_compilers","tags":"","loc":"proc/list_compilers.html"},{"title":"list_libraries – ForCompile","text":"private  subroutine list_libraries(this, language_id) Uses http proc~~list_libraries~~UsesGraph proc~list_libraries forcompile::compiler_explorer%list_libraries http http proc~list_libraries->http Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id Calls proc~~list_libraries~~CallsGraph proc~list_libraries forcompile::compiler_explorer%list_libraries request request proc~list_libraries->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code list_libraries Source Code subroutine list_libraries ( this , language_id ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: language_id type ( response_type ) :: response if ( present ( language_id )) then response = request ( url = this % api_url // '/api/libraries/' // trim ( language_id )) else response = request ( url = this % api_url // '/api/libraries' ) end if if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_libraries","tags":"","loc":"proc/list_libraries.html"},{"title":"list_formatters – ForCompile","text":"private  subroutine list_formatters(this) Uses http proc~~list_formatters~~UsesGraph proc~list_formatters forcompile::compiler_explorer%list_formatters http http proc~list_formatters->http Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Calls proc~~list_formatters~~CallsGraph proc~list_formatters forcompile::compiler_explorer%list_formatters request request proc~list_formatters->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code list_formatters Source Code subroutine list_formatters ( this ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this type ( response_type ) :: response response = request ( url = this % api_url // '/api/formats' ) if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_formatters","tags":"","loc":"proc/list_formatters.html"},{"title":"forcompile – ForCompile","text":"Used by module~~forcompile~~UsedByGraph module~forcompile forcompile program~test_1 test_1 program~test_1->module~forcompile program~test_2 test_2 program~test_2->module~forcompile program~test_3 test_3 program~test_3->module~forcompile program~test_4 test_4 program~test_4->module~forcompile program~test_5 test_5 program~test_5->module~forcompile program~test_6 test_6 program~test_6->module~forcompile program~test_7 test_7 program~test_7->module~forcompile program~test_8 test_8 program~test_8->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Derived Types compilerOptions filters tools libraries options compiler_explorer Subroutines set_filters set_compilerOptions deallocate_options deallocate_comnpiler_explorer deallocate_userArguments deallocate_tools deallocate_libraries deallocate_compiler_id deallocate_source deallocate_lang set_source set_tools set_libraries set_binary set_binaryObject set_commentOnly set_demangle set_directives set_execute set_intel set_labels set_libraryCode set_trim set_debugCalls set_skipAsm set_executorRequest set_userArguments set_lang set_allowStoreCodeDebug set_compiler_id compile list_languages list_compilers list_libraries list_formatters Derived Types type, private :: compilerOptions Components Type Visibility Attributes Name Initial logical, public :: skipAsm = .false. logical, public :: executorRequest = .false. Type-Bound Procedures procedure\n                    ,                  public\n,                   :: set_skipAsm Subroutine procedure\n                    ,                  public\n,                   :: set_executorRequest Subroutine type, private :: filters Components Type Visibility Attributes Name Initial logical, public :: binary = .false. logical, public :: binaryObject = .false. logical, public :: commentOnly = .false. logical, public :: demangle = .false. logical, public :: directives = .false. logical, public :: execute = .false. logical, public :: intel = .false. logical, public :: labels = .false. logical, public :: libraryCode = .false. logical, public :: trim = .false. logical, public :: debugCalls = .false. Type-Bound Procedures procedure\n                    ,                  public\n,                   :: set_binary Subroutine procedure\n                    ,                  public\n,                   :: set_binaryObject Subroutine procedure\n                    ,                  public\n,                   :: set_commentOnly Subroutine procedure\n                    ,                  public\n,                   :: set_demangle Subroutine procedure\n                    ,                  public\n,                   :: set_directives Subroutine procedure\n                    ,                  public\n,                   :: set_execute Subroutine procedure\n                    ,                  public\n,                   :: set_intel Subroutine procedure\n                    ,                  public\n,                   :: set_labels Subroutine procedure\n                    ,                  public\n,                   :: set_libraryCode Subroutine procedure\n                    ,                  public\n,                   :: set_trim Subroutine procedure\n                    ,                  public\n,                   :: set_debugCalls Subroutine type, private :: tools Components Type Visibility Attributes Name Initial character(len=1024), public :: id_args (2) type, private :: libraries Components Type Visibility Attributes Name Initial character(len=1024), public :: id_version (2) type, private :: options Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: userArguments type( compilerOptions ), public :: compilerOptions type( filters ), public :: filters type( tools ), public, allocatable :: tools (:) type( libraries ), public, allocatable :: libraries (:) Type-Bound Procedures procedure\n                    ,                  public\n,                   :: set_userArguments Subroutine procedure\n                    ,                  public\n,                   :: set_compilerOptions Subroutine procedure\n                    ,                  public\n,                   :: set_filters Subroutine procedure\n                    ,                  public\n,                   :: set_tools Subroutine procedure\n                    ,                  public\n,                   :: set_libraries Subroutine procedure\n                    ,                  private\n                  :: deallocate_userArguments Subroutine procedure\n                    ,                  private\n                  :: deallocate_tools Subroutine procedure\n                    ,                  private\n                  :: deallocate_libraries Subroutine procedure\n                    ,                  public\n,                   :: finalize => deallocate_options Subroutine type, public :: compiler_explorer Components Type Visibility Attributes Name Initial character(len=19), public :: api_url = \"https://godbolt.org\" character(len=:), public, allocatable :: compiler_id character(len=:), public, allocatable :: source character(len=:), public, allocatable :: lang logical, public :: allowStoreCodeDebug type( options ), public :: options Type-Bound Procedures procedure\n                    ,                  public\n,                   :: list_languages Subroutine procedure\n                    ,                  public\n,                   :: list_compilers Subroutine procedure\n                    ,                  public\n,                   :: list_libraries Subroutine procedure\n                    ,                  public\n,                   :: list_formatters Subroutine procedure\n                    ,                  public\n,                   :: set_compiler_id Subroutine procedure\n                    ,                  public\n,                   :: set_source Subroutine procedure\n                    ,                  public\n,                   :: set_lang Subroutine procedure\n                    ,                  public\n,                   :: set_allowStoreCodeDebug Subroutine procedure\n                    ,                  public\n,                   :: compile Subroutine procedure\n                    ,                  private\n                  :: deallocate_compiler_id Subroutine procedure\n                    ,                  private\n                  :: deallocate_source Subroutine procedure\n                    ,                  private\n                  :: deallocate_lang Subroutine procedure\n                    ,                  public\n,                   :: finalize => deallocate_comnpiler_explorer Subroutine Subroutines private pure elemental subroutine set_filters (this, binary, binaryObject, commentOnly, demangle, directives, execute, intel, labels, libraryCode, trim, debugCalls) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this logical, intent(in), optional :: binary logical, intent(in), optional :: binaryObject logical, intent(in), optional :: commentOnly logical, intent(in), optional :: demangle logical, intent(in), optional :: directives logical, intent(in), optional :: execute logical, intent(in), optional :: intel logical, intent(in), optional :: labels logical, intent(in), optional :: libraryCode logical, intent(in), optional :: trim logical, intent(in), optional :: debugCalls private pure elemental subroutine set_compilerOptions (this, skipAsm, executorRequest) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this logical, intent(in), optional :: skipAsm logical, intent(in), optional :: executorRequest private pure elemental subroutine deallocate_options (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this private pure elemental subroutine deallocate_comnpiler_explorer (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this private pure elemental subroutine deallocate_userArguments (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this private pure elemental subroutine deallocate_tools (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this private pure elemental subroutine deallocate_libraries (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this private pure elemental subroutine deallocate_compiler_id (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this private pure elemental subroutine deallocate_source (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this private pure elemental subroutine deallocate_lang (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this private pure elemental subroutine set_source (this, source) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in) :: source private pure elemental subroutine set_tools (this, id, args) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this character(len=*), intent(in) :: id character(len=*), intent(in) :: args private pure elemental subroutine set_libraries (this, id, version) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this character(len=*), intent(in) :: id character(len=*), intent(in) :: version private pure elemental subroutine set_binary (this, binary) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: binary private pure elemental subroutine set_binaryObject (this, binaryObject) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: binaryObject private pure elemental subroutine set_commentOnly (this, commentOnly) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: commentOnly private pure elemental subroutine set_demangle (this, demangle) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: demangle private pure elemental subroutine set_directives (this, directives) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: directives private pure elemental subroutine set_execute (this, execute) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: execute private pure elemental subroutine set_intel (this, intel) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: intel private pure elemental subroutine set_labels (this, labels) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: labels private pure elemental subroutine set_libraryCode (this, libraryCode) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: libraryCode private pure elemental subroutine set_trim (this, trim) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: trim private pure elemental subroutine set_debugCalls (this, debugCalls) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( filters ), intent(inout) :: this logical, intent(in) :: debugCalls private pure elemental subroutine set_skipAsm (this, skipAsm) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compilerOptions ), intent(inout) :: this logical, intent(in) :: skipAsm private pure elemental subroutine set_executorRequest (this, executorRequest) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compilerOptions ), intent(inout) :: this logical, intent(in) :: executorRequest private pure elemental subroutine set_userArguments (this, userArguments) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( options ), intent(inout) :: this character(len=*), intent(in) :: userArguments private pure elemental subroutine set_lang (this, lang) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in) :: lang private pure elemental subroutine set_allowStoreCodeDebug (this, allowStoreCodeDebug) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this logical, intent(in) :: allowStoreCodeDebug private pure elemental subroutine set_compiler_id (this, compiler_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in) :: compiler_id private impure elemental subroutine compile (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this private  subroutine list_languages (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this private  subroutine list_compilers (this, language_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id private  subroutine list_libraries (this, language_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id private  subroutine list_formatters (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this","tags":"","loc":"module/forcompile.html"},{"title":"test_5 – ForCompile","text":"Uses forcompile program~~test_5~~UsesGraph program~test_5 test_5 module~forcompile forcompile program~test_5->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_5 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_5 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries ( language_id = 'fortran' ) end program test_5","tags":"","loc":"program/test_5.html"},{"title":"test_2 – ForCompile","text":"Uses forcompile program~~test_2~~UsesGraph program~test_2 test_2 module~forcompile forcompile program~test_2->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_2 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_2 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers () end program test_2","tags":"","loc":"program/test_2.html"},{"title":"test_8 – ForCompile","text":"Uses forcompile program~~test_8~~UsesGraph program~test_8 test_8 module~forcompile forcompile program~test_8->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_8 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_8 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % set_source ( \"& int main() { return 0; }& \" ) call ce % set_compiler_id ( 'g82' ) call ce % options % set_userArguments ( '-O3' ) call ce % options % set_compilerOptions ( skipAsm = . false ., executorRequest = . false .) call ce % options % set_filters (& binary = . false .,& binaryObject = . false .,& commentOnly = . true .,& demangle = . true .,& directives = . true .,& execute = . true .,& intel = . true .,& labels = . true .,& libraryCode = . false .,& trim = . false .,& debugCalls = . false .) call ce % options % set_tools ( id = 'clangtidytrunk' , args = '-checks=*' ) call ce % options % set_libraries ( id = 'range-v3' , version = 'trunk' ) call ce % options % set_libraries ( id = 'fmt' , version = '400' ) call ce % set_lang ( 'c++' ) call ce % set_allowStoreCodeDebug (. true .) call ce % compile () call ce % finalize () end program test_8","tags":"","loc":"program/test_8.html"},{"title":"test_4 – ForCompile","text":"Uses forcompile program~~test_4~~UsesGraph program~test_4 test_4 module~forcompile forcompile program~test_4->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_4 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_4 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries () end program test_4","tags":"","loc":"program/test_4.html"},{"title":"test_7 – ForCompile","text":"Uses forcompile program~~test_7~~UsesGraph program~test_7 test_7 module~forcompile forcompile program~test_7->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_7 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_7 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % set_source ( \"& program hello;& write(*,*) 'Hello World';& end program hello& \" ) call ce % set_compiler_id ( 'gfortran132' ) call ce % options % set_userArguments ( '-O3' ) call ce % options % set_compilerOptions ( skipAsm = . false ., executorRequest = . false .) call ce % options % set_filters (& binary = . false .,& binaryObject = . false .,& commentOnly = . true .,& demangle = . true .,& directives = . true .,& execute = . true .,& intel = . true .,& labels = . true .,& libraryCode = . false .,& trim = . false .,& debugCalls = . false .) call ce % set_lang ( 'fortran' ) call ce % set_allowStoreCodeDebug (. true .) call ce % compile () call ce % finalize () end program test_7","tags":"","loc":"program/test_7.html"},{"title":"test_3 – ForCompile","text":"Uses forcompile program~~test_3~~UsesGraph program~test_3 test_3 module~forcompile forcompile program~test_3->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_3 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_3 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers ( language_id = 'fortran' ) end program test_3","tags":"","loc":"program/test_3.html"},{"title":"test_6 – ForCompile","text":"Uses forcompile program~~test_6~~UsesGraph program~test_6 test_6 module~forcompile forcompile program~test_6->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_6 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_6 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_formatters () end program test_6","tags":"","loc":"program/test_6.html"},{"title":"test_1 – ForCompile","text":"Uses forcompile program~~test_1~~UsesGraph program~test_1 test_1 module~forcompile forcompile program~test_1->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_1 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_1 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_languages () end program test_1","tags":"","loc":"program/test_1.html"},{"title":"forcompile.f90 – ForCompile","text":"Files dependent on this one sourcefile~~forcompile.f90~~AfferentGraph sourcefile~forcompile.f90 forcompile.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~forcompile.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~forcompile.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~forcompile.f90 sourcefile~test4.f90 test4.f90 sourcefile~test4.f90->sourcefile~forcompile.f90 sourcefile~test5.f90 test5.f90 sourcefile~test5.f90->sourcefile~forcompile.f90 sourcefile~test6.f90 test6.f90 sourcefile~test6.f90->sourcefile~forcompile.f90 sourcefile~test7.f90 test7.f90 sourcefile~test7.f90->sourcefile~forcompile.f90 sourcefile~test8.f90 test8.f90 sourcefile~test8.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Modules forcompile Source Code forcompile.f90 Source Code module forcompile implicit none private public :: compiler_explorer !=============================================================================== !> author: Seyed Ali Ghasemi type compilerOptions logical :: skipAsm = . false . logical :: executorRequest = . false . contains procedure :: set_skipAsm procedure :: set_executorRequest end type compilerOptions !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi type filters logical :: binary = . false . logical :: binaryObject = . false . logical :: commentOnly = . false . logical :: demangle = . false . logical :: directives = . false . logical :: execute = . false . logical :: intel = . false . logical :: labels = . false . logical :: libraryCode = . false . logical :: trim = . false . logical :: debugCalls = . false . contains procedure :: set_binary procedure :: set_binaryObject procedure :: set_commentOnly procedure :: set_demangle procedure :: set_directives procedure :: set_execute procedure :: set_intel procedure :: set_labels procedure :: set_libraryCode procedure :: set_trim procedure :: set_debugCalls end type filters !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi type tools character ( len = 1024 ) :: id_args ( 2 ) end type tools !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi type libraries character ( len = 1024 ) :: id_version ( 2 ) end type libraries !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi type options character ( len = :), allocatable :: userArguments type ( compilerOptions ) :: compilerOptions type ( filters ) :: filters type ( tools ), allocatable :: tools (:) type ( libraries ), allocatable :: libraries (:) contains procedure :: set_userArguments procedure :: set_compilerOptions procedure :: set_filters procedure :: set_tools procedure :: set_libraries procedure , private :: deallocate_userArguments procedure , private :: deallocate_tools procedure , private :: deallocate_libraries procedure :: finalize => deallocate_options end type options !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi type compiler_explorer character ( len = 19 ) :: api_url = \"https://godbolt.org\" character ( len = :), allocatable :: compiler_id character ( len = :), allocatable :: source character ( len = :), allocatable :: lang logical :: allowStoreCodeDebug type ( options ) :: options contains procedure :: list_languages procedure :: list_compilers procedure :: list_libraries procedure :: list_formatters procedure :: set_compiler_id procedure :: set_source procedure :: set_lang procedure :: set_allowStoreCodeDebug procedure :: compile procedure , private :: deallocate_compiler_id procedure , private :: deallocate_source procedure , private :: deallocate_lang procedure :: finalize => deallocate_comnpiler_explorer end type compiler_explorer !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_filters ( this ,& binary , binaryObject , commentOnly , demangle , directives , execute , intel ,& labels , libraryCode , trim , debugCalls ) class ( options ), intent ( inout ) :: this logical , intent ( in ), optional :: binary logical , intent ( in ), optional :: binaryObject logical , intent ( in ), optional :: commentOnly logical , intent ( in ), optional :: demangle logical , intent ( in ), optional :: directives logical , intent ( in ), optional :: execute logical , intent ( in ), optional :: intel logical , intent ( in ), optional :: labels logical , intent ( in ), optional :: libraryCode logical , intent ( in ), optional :: trim logical , intent ( in ), optional :: debugCalls if ( present ( binary )) call this % filters % set_binary ( binary ) if ( present ( binaryObject )) call this % filters % set_binaryObject ( binaryObject ) if ( present ( commentOnly )) call this % filters % set_commentOnly ( commentOnly ) if ( present ( demangle )) call this % filters % set_demangle ( demangle ) if ( present ( directives )) call this % filters % set_directives ( directives ) if ( present ( execute )) call this % filters % set_execute ( execute ) if ( present ( intel )) call this % filters % set_intel ( intel ) if ( present ( labels )) call this % filters % set_labels ( labels ) if ( present ( libraryCode )) call this % filters % set_libraryCode ( libraryCode ) if ( present ( trim )) call this % filters % set_trim ( trim ) if ( present ( debugCalls )) call this % filters % set_debugCalls ( debugCalls ) end subroutine set_filters !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_compilerOptions ( this , skipAsm , executorRequest ) class ( options ), intent ( inout ) :: this logical , intent ( in ), optional :: skipAsm logical , intent ( in ), optional :: executorRequest if ( present ( skipAsm )) this % compilerOptions % skipAsm = skipAsm if ( present ( executorRequest )) this % compilerOptions % executorRequest = executorRequest end subroutine set_compilerOptions !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_options ( this ) class ( options ), intent ( inout ) :: this call this % deallocate_userArguments () call this % deallocate_tools () call this % deallocate_libraries () end subroutine deallocate_options !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_comnpiler_explorer ( this ) class ( compiler_explorer ), intent ( inout ) :: this call this % deallocate_compiler_id () call this % deallocate_source () call this % deallocate_lang () call this % options % finalize () end subroutine deallocate_comnpiler_explorer !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_userArguments ( this ) class ( options ), intent ( inout ) :: this if ( allocated ( this % userArguments )) deallocate ( this % userArguments ) end subroutine deallocate_userArguments !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_tools ( this ) class ( options ), intent ( inout ) :: this if ( allocated ( this % tools )) deallocate ( this % tools ) end subroutine deallocate_tools !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_libraries ( this ) class ( options ), intent ( inout ) :: this if ( allocated ( this % libraries )) deallocate ( this % libraries ) end subroutine deallocate_libraries !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_compiler_id ( this ) class ( compiler_explorer ), intent ( inout ) :: this if ( allocated ( this % compiler_id )) deallocate ( this % compiler_id ) end subroutine deallocate_compiler_id !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_source ( this ) class ( compiler_explorer ), intent ( inout ) :: this if ( allocated ( this % source )) deallocate ( this % source ) end subroutine deallocate_source !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_lang ( this ) class ( compiler_explorer ), intent ( inout ) :: this if ( allocated ( this % lang )) deallocate ( this % lang ) end subroutine deallocate_lang !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_source ( this , source ) class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: source this % source = trim ( source ) end subroutine set_source !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_tools ( this , id , args ) class ( options ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: id character ( len =* ), intent ( in ) :: args type ( tools ), allocatable :: tmp (:) if (. not . allocated ( this % tools )) then allocate ( this % tools ( 1 )) this % tools ( 1 )% id_args ( 1 ) = trim ( id ) this % tools ( 1 )% id_args ( 2 ) = trim ( args ) else call move_alloc ( this % tools , tmp ) allocate ( this % tools ( size ( tmp ) + 1 )) this % tools ( 1 : size ( tmp )) = tmp this % tools ( size ( tmp ) + 1 )% id_args ( 1 ) = trim ( id ) this % tools ( size ( tmp ) + 1 )% id_args ( 2 ) = trim ( args ) end if end subroutine set_tools !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_libraries ( this , id , version ) class ( options ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: id character ( len =* ), intent ( in ) :: version type ( libraries ), allocatable :: tmp (:) if (. not . allocated ( this % libraries )) then allocate ( this % libraries ( 1 )) this % libraries ( 1 )% id_version ( 1 ) = trim ( id ) this % libraries ( 1 )% id_version ( 2 ) = trim ( version ) else call move_alloc ( this % libraries , tmp ) allocate ( this % libraries ( size ( tmp ) + 1 )) this % libraries ( 1 : size ( tmp )) = tmp this % libraries ( size ( tmp ) + 1 )% id_version ( 1 ) = trim ( id ) this % libraries ( size ( tmp ) + 1 )% id_version ( 2 ) = trim ( version ) end if end subroutine set_libraries !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_binary ( this , binary ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: binary this % binary = binary end subroutine set_binary !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_binaryObject ( this , binaryObject ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: binaryObject this % binaryObject = binaryObject end subroutine set_binaryObject !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_commentOnly ( this , commentOnly ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: commentOnly this % commentOnly = commentOnly end subroutine set_commentOnly !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_demangle ( this , demangle ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: demangle this % demangle = demangle end subroutine set_demangle !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_directives ( this , directives ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: directives this % directives = directives end subroutine set_directives !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_execute ( this , execute ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: execute this % execute = execute end subroutine set_execute !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_intel ( this , intel ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: intel this % intel = intel end subroutine set_intel !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_labels ( this , labels ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: labels this % labels = labels end subroutine set_labels !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_libraryCode ( this , libraryCode ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: libraryCode this % libraryCode = libraryCode end subroutine set_libraryCode !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_trim ( this , trim ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: trim this % trim = trim end subroutine set_trim !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_debugCalls ( this , debugCalls ) class ( filters ), intent ( inout ) :: this logical , intent ( in ) :: debugCalls this % debugCalls = debugCalls end subroutine set_debugCalls !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_skipAsm ( this , skipAsm ) class ( compilerOptions ), intent ( inout ) :: this logical , intent ( in ) :: skipAsm this % skipAsm = skipAsm end subroutine set_skipAsm !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_executorRequest ( this , executorRequest ) class ( compilerOptions ), intent ( inout ) :: this logical , intent ( in ) :: executorRequest this % executorRequest = executorRequest end subroutine set_executorRequest !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_userArguments ( this , userArguments ) class ( options ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: userArguments this % userArguments = trim ( userArguments ) end subroutine set_userArguments !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_lang ( this , lang ) class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: lang this % lang = trim ( lang ) end subroutine set_lang !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_allowStoreCodeDebug ( this , allowStoreCodeDebug ) class ( compiler_explorer ), intent ( inout ) :: this logical , intent ( in ) :: allowStoreCodeDebug this % allowStoreCodeDebug = allowStoreCodeDebug end subroutine set_allowStoreCodeDebug !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_compiler_id ( this , compiler_id ) class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: compiler_id this % compiler_id = trim ( compiler_id ) end subroutine set_compiler_id !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine compile ( this ) use http , only : response_type , request , HTTP_POST , pair_type use json_module , only : json_file class ( compiler_explorer ), intent ( inout ) :: this character ( len = :), allocatable :: jsonstr type ( pair_type ), allocatable :: req_header (:) type ( response_type ) :: response type ( json_file ) :: json integer :: i character ( len = 10 ) :: i_str req_header = [ pair_type ( 'Content-Type' , 'application/json' )] call json % initialize () call json % add ( 'source' , this % source ) call json % add ( 'options.userArguments' , this % options % userArguments ) call json % add ( 'options.compilerOptions.skipAsm' , this % options % compilerOptions % skipAsm ) call json % add ( 'options.compilerOptions.executorRequest' , this % options % compilerOptions % executorRequest ) call json % add ( 'options.filters.binary' , this % options % filters % binary ) call json % add ( 'options.filters.binaryObject' , this % options % filters % binaryObject ) call json % add ( 'options.filters.commentOnly' , this % options % filters % commentOnly ) call json % add ( 'options.filters.demangle' , this % options % filters % demangle ) call json % add ( 'options.filters.directives' , this % options % filters % directives ) call json % add ( 'options.filters.execute' , this % options % filters % execute ) call json % add ( 'options.filters.intel' , this % options % filters % intel ) call json % add ( 'options.filters.labels' , this % options % filters % labels ) call json % add ( 'options.filters.libraryCode' , this % options % filters % libraryCode ) call json % add ( 'options.filters.trim' , this % options % filters % trim ) call json % add ( 'options.filters.debugCalls' , this % options % filters % debugCalls ) if ( allocated ( this % options % tools )) then do i = 1 , size ( this % options % tools ) write ( i_str , '(I2)' ) i call json % add ( 'options.tools(' // trim ( i_str ) // ').id' , trim ( this % options % tools ( i )% id_args ( 1 ))) call json % add ( 'options.tools(' // trim ( i_str ) // ').args' , trim ( this % options % tools ( i )% id_args ( 2 ))) end do end if if ( allocated ( this % options % libraries )) then do i = 1 , size ( this % options % libraries ) write ( i_str , '(I2)' ) i call json % add ( 'options.libraries(' // trim ( i_str ) // ').id' , trim ( this % options % libraries ( i )% id_version ( 1 ))) call json % add ( 'options.libraries(' // trim ( i_str ) // ').version' , trim ( this % options % libraries ( i )% id_version ( 2 ))) end do end if call json % add ( 'lang' , this % lang ) call json % add ( 'allowStoreCodeDebug' , this % allowStoreCodeDebug ) call json % print_to_string ( jsonstr ) call json % destroy () response = request ( url = this % api_url // '/api/compiler/' // trim ( this % compiler_id ) // '/compile' ,& method = HTTP_POST , data = jsonstr , header = req_header ) if ( response % ok ) then print * , response % content else print '(A)' , 'Sorry, an error occurred while processing your request.' print '(A)' , 'Error message:' , response % err_msg end if end subroutine compile !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi subroutine list_languages ( this ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this type ( response_type ) :: response response = request ( url = this % api_url // '/api/languages' ) if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_languages !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi subroutine list_compilers ( this , language_id ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: language_id type ( response_type ) :: response if ( present ( language_id )) then response = request ( url = this % api_url // '/api/compilers/' // trim ( language_id )) else response = request ( url = this % api_url // '/api/compilers' ) end if if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_compilers !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi subroutine list_libraries ( this , language_id ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: language_id type ( response_type ) :: response if ( present ( language_id )) then response = request ( url = this % api_url // '/api/libraries/' // trim ( language_id )) else response = request ( url = this % api_url // '/api/libraries' ) end if if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_libraries !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi subroutine list_formatters ( this ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this type ( response_type ) :: response response = request ( url = this % api_url // '/api/formats' ) if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_formatters !=============================================================================== end module forcompile","tags":"","loc":"sourcefile/forcompile.f90.html"},{"title":"test5.f90 – ForCompile","text":"This file depends on sourcefile~~test5.f90~~EfferentGraph sourcefile~test5.f90 test5.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test5.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_5 Source Code test5.f90 Source Code program test_5 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries ( language_id = 'fortran' ) end program test_5","tags":"","loc":"sourcefile/test5.f90.html"},{"title":"test2.f90 – ForCompile","text":"This file depends on sourcefile~~test2.f90~~EfferentGraph sourcefile~test2.f90 test2.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test2.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_2 Source Code test2.f90 Source Code program test_2 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers () end program test_2","tags":"","loc":"sourcefile/test2.f90.html"},{"title":"test8.f90 – ForCompile","text":"This file depends on sourcefile~~test8.f90~~EfferentGraph sourcefile~test8.f90 test8.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test8.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_8 Source Code test8.f90 Source Code program test_8 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % set_source ( \"& int main() { return 0; }& \" ) call ce % set_compiler_id ( 'g82' ) call ce % options % set_userArguments ( '-O3' ) call ce % options % set_compilerOptions ( skipAsm = . false ., executorRequest = . false .) call ce % options % set_filters (& binary = . false .,& binaryObject = . false .,& commentOnly = . true .,& demangle = . true .,& directives = . true .,& execute = . true .,& intel = . true .,& labels = . true .,& libraryCode = . false .,& trim = . false .,& debugCalls = . false .) call ce % options % set_tools ( id = 'clangtidytrunk' , args = '-checks=*' ) call ce % options % set_libraries ( id = 'range-v3' , version = 'trunk' ) call ce % options % set_libraries ( id = 'fmt' , version = '400' ) call ce % set_lang ( 'c++' ) call ce % set_allowStoreCodeDebug (. true .) call ce % compile () call ce % finalize () end program test_8","tags":"","loc":"sourcefile/test8.f90.html"},{"title":"test4.f90 – ForCompile","text":"This file depends on sourcefile~~test4.f90~~EfferentGraph sourcefile~test4.f90 test4.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test4.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_4 Source Code test4.f90 Source Code program test_4 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries () end program test_4","tags":"","loc":"sourcefile/test4.f90.html"},{"title":"test7.f90 – ForCompile","text":"This file depends on sourcefile~~test7.f90~~EfferentGraph sourcefile~test7.f90 test7.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test7.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_7 Source Code test7.f90 Source Code program test_7 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % set_source ( \"& program hello;& write(*,*) 'Hello World';& end program hello& \" ) call ce % set_compiler_id ( 'gfortran132' ) call ce % options % set_userArguments ( '-O3' ) call ce % options % set_compilerOptions ( skipAsm = . false ., executorRequest = . false .) call ce % options % set_filters (& binary = . false .,& binaryObject = . false .,& commentOnly = . true .,& demangle = . true .,& directives = . true .,& execute = . true .,& intel = . true .,& labels = . true .,& libraryCode = . false .,& trim = . false .,& debugCalls = . false .) call ce % set_lang ( 'fortran' ) call ce % set_allowStoreCodeDebug (. true .) call ce % compile () call ce % finalize () end program test_7","tags":"","loc":"sourcefile/test7.f90.html"},{"title":"test3.f90 – ForCompile","text":"This file depends on sourcefile~~test3.f90~~EfferentGraph sourcefile~test3.f90 test3.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test3.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_3 Source Code test3.f90 Source Code program test_3 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers ( language_id = 'fortran' ) end program test_3","tags":"","loc":"sourcefile/test3.f90.html"},{"title":"test6.f90 – ForCompile","text":"This file depends on sourcefile~~test6.f90~~EfferentGraph sourcefile~test6.f90 test6.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test6.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_6 Source Code test6.f90 Source Code program test_6 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_formatters () end program test_6","tags":"","loc":"sourcefile/test6.f90.html"},{"title":"test1.f90 – ForCompile","text":"This file depends on sourcefile~~test1.f90~~EfferentGraph sourcefile~test1.f90 test1.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test1.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_1 Source Code test1.f90 Source Code program test_1 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_languages () end program test_1","tags":"","loc":"sourcefile/test1.f90.html"}]}