var tipuesearch = {"pages":[{"title":" ForCompile ","text":"ForCompile Developer Info Seyed Ali Ghasemi","tags":"home","loc":"index.html"},{"title":"compiler_explorer – ForCompile ","text":"type, public :: compiler_explorer Contents Variables api_url Type-Bound Procedures list_languages list_compilers list_libraries list_formatters Source Code compiler_explorer Components Type Visibility Attributes Name Initial character(len=19), public :: api_url = \"https://godbolt.org\" Type-Bound Procedures procedure, public,  :: list_languages private  subroutine list_languages (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this procedure, public,  :: list_compilers private  subroutine list_compilers (this, language_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id procedure, public,  :: list_libraries private  subroutine list_libraries (this, language_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id procedure, public,  :: list_formatters private  subroutine list_formatters (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Source Code type :: compiler_explorer character ( len = 19 ) :: api_url = \"https://godbolt.org\" contains procedure :: list_languages procedure :: list_compilers procedure :: list_libraries procedure :: list_formatters end type compiler_explorer","tags":"","loc":"type/compiler_explorer.html"},{"title":"list_languages – ForCompile","text":"private  subroutine list_languages(this) Uses http proc~~list_languages~~UsesGraph proc~list_languages forcompile::compiler_explorer%list_languages http http proc~list_languages->http Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Calls proc~~list_languages~~CallsGraph proc~list_languages forcompile::compiler_explorer%list_languages request request proc~list_languages->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code list_languages Source Code subroutine list_languages ( this ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this type ( response_type ) :: response response = request ( url = this % api_url // '/api/languages' ) if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_languages","tags":"","loc":"proc/list_languages.html"},{"title":"list_compilers – ForCompile","text":"private  subroutine list_compilers(this, language_id) Uses http proc~~list_compilers~~UsesGraph proc~list_compilers forcompile::compiler_explorer%list_compilers http http proc~list_compilers->http Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id Calls proc~~list_compilers~~CallsGraph proc~list_compilers forcompile::compiler_explorer%list_compilers request request proc~list_compilers->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code list_compilers Source Code subroutine list_compilers ( this , language_id ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: language_id type ( response_type ) :: response if ( present ( language_id )) then response = request ( url = this % api_url // '/api/compilers/' // trim ( language_id )) else response = request ( url = this % api_url // '/api/compilers' ) end if if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_compilers","tags":"","loc":"proc/list_compilers.html"},{"title":"list_libraries – ForCompile","text":"private  subroutine list_libraries(this, language_id) Uses http proc~~list_libraries~~UsesGraph proc~list_libraries forcompile::compiler_explorer%list_libraries http http proc~list_libraries->http Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id Calls proc~~list_libraries~~CallsGraph proc~list_libraries forcompile::compiler_explorer%list_libraries request request proc~list_libraries->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code list_libraries Source Code subroutine list_libraries ( this , language_id ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: language_id type ( response_type ) :: response if ( present ( language_id )) then response = request ( url = this % api_url // '/api/libraries/' // trim ( language_id )) else response = request ( url = this % api_url // '/api/libraries' ) end if if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_libraries","tags":"","loc":"proc/list_libraries.html"},{"title":"list_formatters – ForCompile","text":"private  subroutine list_formatters(this) Uses http proc~~list_formatters~~UsesGraph proc~list_formatters forcompile::compiler_explorer%list_formatters http http proc~list_formatters->http Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type Bound compiler_explorer Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this Calls proc~~list_formatters~~CallsGraph proc~list_formatters forcompile::compiler_explorer%list_formatters request request proc~list_formatters->request Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Source Code list_formatters Source Code subroutine list_formatters ( this ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this type ( response_type ) :: response response = request ( url = this % api_url // '/api/formats' ) if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_formatters","tags":"","loc":"proc/list_formatters.html"},{"title":"forcompile – ForCompile","text":"Used by module~~forcompile~~UsedByGraph module~forcompile forcompile program~test_1 test_1 program~test_1->module~forcompile program~test_2 test_2 program~test_2->module~forcompile program~test_3 test_3 program~test_3->module~forcompile program~test_4 test_4 program~test_4->module~forcompile program~test_5 test_5 program~test_5->module~forcompile program~test_6 test_6 program~test_6->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Derived Types compiler_explorer Subroutines list_languages list_compilers list_libraries list_formatters Derived Types type, public :: compiler_explorer Components Type Visibility Attributes Name Initial character(len=19), public :: api_url = \"https://godbolt.org\" Type-Bound Procedures procedure\n                    ,                  public\n,                   :: list_languages Subroutine procedure\n                    ,                  public\n,                   :: list_compilers Subroutine procedure\n                    ,                  public\n,                   :: list_libraries Subroutine procedure\n                    ,                  public\n,                   :: list_formatters Subroutine Subroutines private  subroutine list_languages (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this private  subroutine list_compilers (this, language_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id private  subroutine list_libraries (this, language_id) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this character(len=*), intent(in), optional :: language_id private  subroutine list_formatters (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( compiler_explorer ), intent(inout) :: this","tags":"","loc":"module/forcompile.html"},{"title":"test_5 – ForCompile","text":"Uses forcompile program~~test_5~~UsesGraph program~test_5 test_5 module~forcompile forcompile program~test_5->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_5 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_5 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries ( language_id = 'fortran' ) end program test_5","tags":"","loc":"program/test_5.html"},{"title":"test_2 – ForCompile","text":"Uses forcompile program~~test_2~~UsesGraph program~test_2 test_2 module~forcompile forcompile program~test_2->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_2 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_2 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers () end program test_2","tags":"","loc":"program/test_2.html"},{"title":"test_4 – ForCompile","text":"Uses forcompile program~~test_4~~UsesGraph program~test_4 test_4 module~forcompile forcompile program~test_4->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_4 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_4 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries () end program test_4","tags":"","loc":"program/test_4.html"},{"title":"test_3 – ForCompile","text":"Uses forcompile program~~test_3~~UsesGraph program~test_3 test_3 module~forcompile forcompile program~test_3->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_3 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_3 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers ( language_id = 'fortran' ) end program test_3","tags":"","loc":"program/test_3.html"},{"title":"test_6 – ForCompile","text":"Uses forcompile program~~test_6~~UsesGraph program~test_6 test_6 module~forcompile forcompile program~test_6->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_6 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_6 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_formatters () end program test_6","tags":"","loc":"program/test_6.html"},{"title":"test_1 – ForCompile","text":"Uses forcompile program~~test_1~~UsesGraph program~test_1 test_1 module~forcompile forcompile program~test_1->module~forcompile Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Variables ce Source Code test_1 Variables Type Attributes Name Initial type( compiler_explorer ) :: ce Source Code program test_1 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_languages () end program test_1","tags":"","loc":"program/test_1.html"},{"title":"forcompile.f90 – ForCompile","text":"Files dependent on this one sourcefile~~forcompile.f90~~AfferentGraph sourcefile~forcompile.f90 forcompile.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~forcompile.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~forcompile.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~forcompile.f90 sourcefile~test4.f90 test4.f90 sourcefile~test4.f90->sourcefile~forcompile.f90 sourcefile~test5.f90 test5.f90 sourcefile~test5.f90->sourcefile~forcompile.f90 sourcefile~test6.f90 test6.f90 sourcefile~test6.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Modules forcompile Source Code forcompile.f90 Source Code module forcompile implicit none private public :: compiler_explorer !=============================================================================== !> author: Seyed Ali Ghasemi type :: compiler_explorer character ( len = 19 ) :: api_url = \"https://godbolt.org\" contains procedure :: list_languages procedure :: list_compilers procedure :: list_libraries procedure :: list_formatters end type compiler_explorer !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi subroutine list_languages ( this ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this type ( response_type ) :: response response = request ( url = this % api_url // '/api/languages' ) if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_languages !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi subroutine list_compilers ( this , language_id ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: language_id type ( response_type ) :: response if ( present ( language_id )) then response = request ( url = this % api_url // '/api/compilers/' // trim ( language_id )) else response = request ( url = this % api_url // '/api/compilers' ) end if if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_compilers !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi subroutine list_libraries ( this , language_id ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: language_id type ( response_type ) :: response if ( present ( language_id )) then response = request ( url = this % api_url // '/api/libraries/' // trim ( language_id )) else response = request ( url = this % api_url // '/api/libraries' ) end if if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_libraries !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi subroutine list_formatters ( this ) use http , only : response_type , request class ( compiler_explorer ), intent ( inout ) :: this type ( response_type ) :: response response = request ( url = this % api_url // '/api/formats' ) if (. not . response % ok ) then print * , 'Error message : ' , response % err_msg else print * , 'Response Content : ' , response % content end if end subroutine list_formatters !=============================================================================== end module forcompile","tags":"","loc":"sourcefile/forcompile.f90.html"},{"title":"test5.f90 – ForCompile","text":"This file depends on sourcefile~~test5.f90~~EfferentGraph sourcefile~test5.f90 test5.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test5.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_5 Source Code test5.f90 Source Code program test_5 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries ( language_id = 'fortran' ) end program test_5","tags":"","loc":"sourcefile/test5.f90.html"},{"title":"test2.f90 – ForCompile","text":"This file depends on sourcefile~~test2.f90~~EfferentGraph sourcefile~test2.f90 test2.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test2.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_2 Source Code test2.f90 Source Code program test_2 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers () end program test_2","tags":"","loc":"sourcefile/test2.f90.html"},{"title":"test4.f90 – ForCompile","text":"This file depends on sourcefile~~test4.f90~~EfferentGraph sourcefile~test4.f90 test4.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test4.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_4 Source Code test4.f90 Source Code program test_4 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_libraries () end program test_4","tags":"","loc":"sourcefile/test4.f90.html"},{"title":"test3.f90 – ForCompile","text":"This file depends on sourcefile~~test3.f90~~EfferentGraph sourcefile~test3.f90 test3.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test3.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_3 Source Code test3.f90 Source Code program test_3 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_compilers ( language_id = 'fortran' ) end program test_3","tags":"","loc":"sourcefile/test3.f90.html"},{"title":"test6.f90 – ForCompile","text":"This file depends on sourcefile~~test6.f90~~EfferentGraph sourcefile~test6.f90 test6.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test6.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_6 Source Code test6.f90 Source Code program test_6 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_formatters () end program test_6","tags":"","loc":"sourcefile/test6.f90.html"},{"title":"test1.f90 – ForCompile","text":"This file depends on sourcefile~~test1.f90~~EfferentGraph sourcefile~test1.f90 test1.f90 sourcefile~forcompile.f90 forcompile.f90 sourcefile~test1.f90->sourcefile~forcompile.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Contents Programs test_1 Source Code test1.f90 Source Code program test_1 use forcompile , only : compiler_explorer implicit none type ( compiler_explorer ) :: ce call ce % list_languages () end program test_1","tags":"","loc":"sourcefile/test1.f90.html"}]}